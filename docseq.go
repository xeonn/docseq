package docseq

import (
	"context"
	"errors"
	"strconv"
	"strings"
	"sync"

	"github.com/go-kivik/kivik/v3"
	"github.com/no-src/log"
)

// DocMustExist is a flag to indicate if the document must exist in database
// before getting the sequence number.
var DocMustExist = true

// return a new sequence number for a document
// the format of the sequence number is:
// <prefix>/<suffix>
// where:
// client is the name of the client. It is used to get the database uri
// org is the name of the organization. It is used to get the database partition
//
// seqDocid (optional) is the id of the document.
// It is used to get the document from the database (combined with org, org:docid)
//
//	seqDocid for orderly obtained from user profile at frontend
//
// doctype is the type of the document. It is used to get the entries in document
// prefix (optional) is a string that is prepended to the sequence number
// suffix (optional) is a string that is appended to the sequence number
// separator (optional) is a string that separates the prefix and suffix
// the sequence number is generated by incrementing a number in the database
// the number is incremented by 1 each time a sequence number is generated
func Next(client string, org string, seqDocid string, doctype string, prefix string, suffix string, separator string) (string, error) {
	if len(client) == 0 {
		return "", errors.New("client is empty")
	}

	if len(org) == 0 {
		return "", errors.New("org is empty")
	}

	if len(seqDocid) == 0 {
		// this requires '[org]:default' database exists
		seqDocid = org + "default"
		log.Warn("docid was not provided. Using 'default' as docid")
	}

	if len(doctype) == 0 {
		return "", errors.New("doctype is empty")
	}

	retVal := ""

	// get db uri
	conn, err := dbConnection(client)
	if err != nil {
		return "", err
	}

	// get number from database
	nbr, err := getNumber(conn, org, seqDocid, doctype)
	if err != nil {
		return "", err
	}

	retVal = strconv.Itoa(nbr)

	// prepend prefix
	if len(prefix) > 0 {
		retVal = prefix + separator + strconv.Itoa(nbr)
	}

	// append suffix
	if len(suffix) > 0 {
		retVal = retVal + separator + suffix
	}

	if len(retVal) == 0 {
		return "", errors.New("error generating sequence number. retVal is empty")
	}

	return retVal, nil
}

// lock to synchronize access to getNumber.
var getNumberLock sync.Mutex = sync.Mutex{}

// connect to the database and get the sequence number
// org is the name of the organization
// docid is the id of the document where in orderly to be obtained from user profile
// docMustExist is a flag to indicate if the document must exist before getting the sequence number.
//
//	    If the document does not exist while docMustExist is true, an error is returned
//		   If the document does not exist while docMustExist is false, a new document is created
//
// doctype is the type of the document
func getNumber(conn *kivik.Client, org string, docid string, doctype string) (int, error) {
	getNumberLock.Lock()
	defer getNumberLock.Unlock()

	// issue request to database using kivik
	rows := conn.DB(context.Background(), TableName).Get(context.Background(), org+":"+docid, kivik.Options{
		"include_docs": true,
	})

	// document map
	var doc map[string]interface{}

	if rows != nil {
		err := rows.ScanDoc(&doc)
		if err != nil {
			// document is missing, create a new document
			if strings.Contains(err.Error(), "Not Found: missing") {
				if DocMustExist {
					log.Info("force error because DocMustExist is true")
					return -1, errors.New("document does not exist")
				} else {
					// create a new document by resetting the doc variable to an empty map and continue
					doc = map[string]interface{}{}
				}
			} else {
				// some other error occurred
				return -1, err
			}
		}
	}

	// read the running number for doctype from the document. If doctype is not found, create a new running number
	seqroot := map[string]interface{}{ // initialize with default values as fallback in case the document is empty
		"current": "1000001",
	}

	// if the doctype exists, override the default values created above
	if doc[doctype] != nil {
		seqroot = doc[doctype].(map[string]interface{})
	}

	// json format of the document is:
	// {
	//	...
	// 	"TRF": {
	// 		"current": "1"
	// 	}
	//	...
	// }
	strNo := seqroot["current"].(string)

	if len(strNo) == 0 {
		// this error should not happen because we have initialized the value above
		return -1, errors.New("missing document type requested for sequence number")
	}

	intNo, err := strconv.Atoi(strNo)
	if err != nil {
		return -1, errors.New("invalid sequence number for document type " + doctype)
	}

	// modify the entry in the database with the new number
	newno := intNo + 1
	doc[doctype] = map[string]interface{}{
		"current": strconv.Itoa(newno),
	}

	// issue request to database using kivik
	_, err = conn.DB(context.Background(), TableName).Put(context.Background(), org+":"+docid, doc)
	if err != nil {
		return -1, err
	}

	return intNo, nil
}

func dbConnection(client string) (*kivik.Client, error) {

	uri, err := DbUri(context.Background())
	if err != nil {
		return nil, err
	}

	conn, err := kivik.New(driver, uri)
	if err != nil {
		return nil, err
	}

	return conn, nil
}
